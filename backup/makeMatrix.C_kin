#include <TLorentzVector.h>

#include "HistoBook.h"
#include "tdrstyle.C"

using namespace std;

void makeMatrix(){
  //FILE
  TFile *inFile = TFile::Open(Form("/data/users/seohyun/ntuple/hep2017/v806/TT_powheg_ttbb.root"));
  TFile *outFile = TFile::Open(Form("../root/hist_respMatrix_ttbb_test.root"),"recreate");

  //TREE READER
  TTreeReader treeReader("ttbbLepJets/tree",inFile);
  TTreeReaderValue<Int_t> event = {treeReader, "event"};
  TTreeReaderValue<Int_t> channel = {treeReader, "channel"};
  TTreeReaderValue<Float_t> genWeight = {treeReader, "genweight"};
  TTreeReaderArray<float> PUWeight = {treeReader, "PUWeight"};
  TTreeReaderValue<Float_t> lepton_pT = {treeReader, "lepton_pT"};
  TTreeReaderValue<Float_t> lepton_eta = {treeReader, "lepton_eta"};
  TTreeReaderValue<Float_t> lepton_phi = {treeReader, "lepton_phi"};
  TTreeReaderValue<Float_t> lepton_E = {treeReader, "lepton_E"};
  TTreeReaderArray<float> jet_pT = {treeReader, "jet_pT"};
  TTreeReaderArray<float> jet_eta = {treeReader, "jet_eta"};
  TTreeReaderArray<float> jet_phi = {treeReader, "jet_phi"};
  TTreeReaderArray<float> jet_E = {treeReader, "jet_E"};
  TTreeReaderArray<int> jet_index = {treeReader, "jet_index"};
  TTreeReaderArray<float> jet_CSV = {treeReader, "jet_CSV"};
  TTreeReaderArray<int> kinjet_index = {treeReader, "kinjet_index"};
  TTreeReaderArray<float> jet_JER_Nom = {treeReader, "jet_JER_Nom"};
  TTreeReaderValue<float> addbjet1_pt = {treeReader, "addbjet1_pt"};
  TTreeReaderValue<float> addbjet1_eta = {treeReader, "addbjet1_eta"};
  TTreeReaderValue<float> addbjet1_phi = {treeReader, "addbjet1_phi"};
  TTreeReaderValue<float> addbjet1_e = {treeReader, "addbjet1_e"};
  TTreeReaderValue<float> addbjet2_pt = {treeReader, "addbjet2_pt"};
  TTreeReaderValue<float> addbjet2_eta = {treeReader, "addbjet2_eta"};
  TTreeReaderValue<float> addbjet2_phi = {treeReader, "addbjet2_phi"};
  TTreeReaderValue<float> addbjet2_e = {treeReader, "addbjet2_e"};
  TTreeReaderArray<float> genjet_pT = {treeReader, "genjet_pT"};
  TTreeReaderArray<float> genjet_eta = {treeReader, "genjet_eta"};
  TTreeReaderArray<float> genjet_phi = {treeReader, "genjet_phi"};
  TTreeReaderArray<float> genjet_E = {treeReader, "genjet_E"};

  TTreeReader gentreeReader("ttbbLepJets/gentree", inFile);
  TTreeReaderValue<Int_t> gen_event = {gentreeReader, "event"};
  TTreeReaderValue<Float_t> gen_weight = {gentreeReader, "genweight"};
  TTreeReaderValue<Int_t> gen_channel = {gentreeReader, "genchannel"};
  TTreeReaderValue<float> gen_addbjet1_pt = {gentreeReader, "addbjet1_pt"};
  TTreeReaderValue<float> gen_addbjet1_eta = {gentreeReader, "addbjet1_eta"};
  TTreeReaderValue<float> gen_addbjet1_phi = {gentreeReader, "addbjet1_phi"};
  TTreeReaderValue<float> gen_addbjet1_e = {gentreeReader, "addbjet1_e"};
  TTreeReaderValue<float> gen_addbjet2_pt = {gentreeReader, "addbjet2_pt"};
  TTreeReaderValue<float> gen_addbjet2_eta = {gentreeReader, "addbjet2_eta"};
  TTreeReaderValue<float> gen_addbjet2_phi = {gentreeReader, "addbjet2_phi"};
  TTreeReaderValue<float> gen_addbjet2_e = {gentreeReader, "addbjet2_e"};

  HistoBook *h_matrix = new HistoBook(2, NAME_[TTBB_].c_str());
  HistoBook *h_control = new HistoBook(1, NAME_[TTBB_].c_str());
 
  const int xNbins_gen_addbjets_dR = h_control->xNbins_gen_addbjets_dR;
  const int xNbins_gen_addbjets_M = h_control->xNbins_gen_addbjets_M;
  const int xNbins_reco_addjets_dR = h_control->xNbins_reco_addjets_dR;
  const int xNbins_reco_addjets_M = h_control->xNbins_reco_addjets_M;
   
  while(treeReader.Next()){
    const int mode = *channel;
    const double eventWeight = PUWeight[0]*(*genWeight);
    TLorentzVector lepton;
    lepton.SetPtEtaPhiE(*lepton_pT, *lepton_eta, *lepton_phi, *lepton_E);
    //Object selection
    const bool passmuon = (mode == MUON_) && (lepton.Pt() > MUON_PT_) && (abs(lepton.Eta()) < MUON_ETA_);
    const bool passelectron = (mode == ELECTRON_) && (lepton.Pt() > ELECTRON_PT_) && (abs(lepton.Eta()) < ELECTRON_ETA_);
    if( !passmuon and !passelectron ) continue;

    int njets = 0; int nbjets_t = 0;
    multimap<float /*jet_CSV*/, TLorentzVector /*jet 4-momentum*/, std::greater<float>> m_reco_addJets;
    multimap<float /*jet_CSV*/, TLorentzVector /*jet 4-momentum*/, std::greater<float>> m_reco_addBjets;
     
    for( unsigned int iJet=0;iJet < jet_pT.GetSize(); ++iJet ){
      TLorentzVector jet;
      jet.SetPtEtaPhiE(jet_pT[iJet],jet_eta[iJet],jet_phi[iJet],jet_E[iJet]);
      jet *= jet_JER_Nom[iJet];

      bool isDupl = false;
      for( unsigned int i : kinjet_index ){
	if( i == iJet ) {isDupl = true; break;}
      }

      if( jet.Pt() <= JET_PT_ || abs(jet.Eta()) >= JET_ETA_ ) continue;
      ++njets;
      if( !isDupl ){
	m_reco_addJets.insert(pair<float, TLorentzVector>(jet_CSV[iJet],jet));
      }
      if( jet_CSV[iJet] > JET_CSV_TIGHT_ ){
	++nbjets_t;
      }
    }//Jet selection
    
    //for( unsigned int iJet=0; iJet < genjet_pT.GetSize(); ++iJet ){
    //  TLorentzVector genjet;
    //  genjet.SetPtEtaPhiE(genjet_pT[iJet],genjet_eta[iJet],genjet_phi[iJet],genjet_E[iJet]);
    //  if( genjet.Pt() <= 20.0 || genjet.Eta() >= 2.5 ) continue;
    //}

    double reco_addJets_deltaR = -999.0;
    double reco_addJets_invMass = -999.0;
    if( m_reco_addJets.size() >= 2) {
      auto reco_addJet1 = m_reco_addJets.begin()->second;
      auto reco_addJet2 = std::next(m_reco_addJets.begin())->second;

      reco_addJets_deltaR = reco_addJet1.DeltaR(reco_addJet2);
      reco_addJets_invMass = (reco_addJet1+reco_addJet2).M();
    }
  
    TLorentzVector gen_addBjet1, gen_addBjet2;
    double gen_addbJets_deltaR = -999.0;
    double gen_addbJets_invMass = -999.0;
    gen_addBjet1.SetPtEtaPhiE(*addbjet1_pt, *addbjet1_eta, *addbjet1_phi, *addbjet1_e);
    gen_addBjet2.SetPtEtaPhiE(*addbjet2_pt, *addbjet2_eta, *addbjet2_phi, *addbjet2_e);

    gen_addbJets_deltaR = gen_addBjet1.DeltaR(gen_addBjet2);
    gen_addbJets_invMass = (gen_addBjet1+gen_addBjet2).M();

    if( passmuon && !passelectron ){
	h_control->h_reco_addjets_deltaR[MUON_][0]->Fill(reco_addJets_deltaR, eventWeight);
	h_control->h_reco_addjets_invMass[MUON_][0]->Fill(reco_addJets_invMass, eventWeight);
	h_matrix->h_respMatrix_deltaR[MUON_][0]->Fill(reco_addJets_deltaR, gen_addbJets_deltaR, eventWeight);
	h_matrix->h_respMatrix_invMass[MUON_][0]->Fill(reco_addJets_invMass, gen_addbJets_invMass, eventWeight);
	h_matrix->h_gen_addbjets_deltaR[MUON_][0]->Fill(gen_addbJets_deltaR, eventWeight);
	h_matrix->h_gen_addbjets_invMass[MUON_][0]->Fill(gen_addbJets_invMass, eventWeight);
	if( njets >= NUMBER_OF_JETS_ ){
	  h_control->h_reco_addjets_deltaR[MUON_][1]->Fill(reco_addJets_deltaR, eventWeight);
	  h_control->h_reco_addjets_invMass[MUON_][1]->Fill(reco_addJets_invMass, eventWeight);
	  h_matrix->h_respMatrix_deltaR[MUON_][1]->Fill(reco_addJets_deltaR, gen_addbJets_deltaR, eventWeight);
	  h_matrix->h_respMatrix_invMass[MUON_][1]->Fill(reco_addJets_invMass, gen_addbJets_invMass, eventWeight);
	  h_matrix->h_gen_addbjets_deltaR[MUON_][1]->Fill(gen_addbJets_deltaR, eventWeight);
	  h_matrix->h_gen_addbjets_invMass[MUON_][1]->Fill(gen_addbJets_invMass, eventWeight);
	  if( nbjets_t >= NUMBER_OF_BJETS_ ){	 
	    h_control->h_reco_addjets_deltaR[MUON_][2]->Fill(reco_addJets_deltaR, eventWeight);
	    h_control->h_reco_addjets_invMass[MUON_][2]->Fill(reco_addJets_invMass, eventWeight);
	    h_matrix->h_respMatrix_deltaR[MUON_][2]->Fill(reco_addJets_deltaR, gen_addbJets_deltaR, eventWeight);
	    h_matrix->h_respMatrix_invMass[MUON_][2]->Fill(reco_addJets_invMass, gen_addbJets_invMass, eventWeight);
	    h_matrix->h_gen_addbjets_deltaR[MUON_][2]->Fill(gen_addbJets_deltaR, eventWeight);
	    h_matrix->h_gen_addbjets_invMass[MUON_][2]->Fill(gen_addbJets_invMass, eventWeight);
	  }//nbjets >= 2
	  if( nbjets_t >= NUMBER_OF_BJETS_+1 ){
	    h_control->h_reco_addjets_deltaR[MUON_][3]->Fill(reco_addJets_deltaR, eventWeight);
	    h_control->h_reco_addjets_invMass[MUON_][3]->Fill(reco_addJets_invMass, eventWeight);
	    h_matrix->h_respMatrix_deltaR[MUON_][3]->Fill(reco_addJets_deltaR, gen_addbJets_deltaR, eventWeight);
	    h_matrix->h_respMatrix_invMass[MUON_][3]->Fill(reco_addJets_invMass, gen_addbJets_invMass, eventWeight);
	    h_matrix->h_gen_addbjets_deltaR[MUON_][3]->Fill(gen_addbJets_deltaR, eventWeight);
	    h_matrix->h_gen_addbjets_invMass[MUON_][3]->Fill(gen_addbJets_invMass, eventWeight);
	  }//nbjets >= 3
	}//njets >= 6
      }//One muon

      if( !passmuon && passelectron ){
	h_control->h_reco_addjets_deltaR[ELECTRON_][0]->Fill(reco_addJets_deltaR, eventWeight);
	h_control->h_reco_addjets_invMass[ELECTRON_][0]->Fill(reco_addJets_invMass, eventWeight);
	h_matrix->h_respMatrix_deltaR[ELECTRON_][0]->Fill(reco_addJets_deltaR, gen_addbJets_deltaR, eventWeight);
	h_matrix->h_respMatrix_invMass[ELECTRON_][0]->Fill(reco_addJets_invMass, gen_addbJets_invMass, eventWeight);
	h_matrix->h_gen_addbjets_deltaR[ELECTRON_][0]->Fill(gen_addbJets_deltaR, eventWeight);
	h_matrix->h_gen_addbjets_invMass[ELECTRON_][0]->Fill(gen_addbJets_invMass, eventWeight);
	if( njets >= NUMBER_OF_JETS_ ){
	  h_control->h_reco_addjets_deltaR[ELECTRON_][1]->Fill(reco_addJets_deltaR, eventWeight);
	  h_control->h_reco_addjets_invMass[ELECTRON_][1]->Fill(reco_addJets_invMass, eventWeight);
	  h_matrix->h_respMatrix_deltaR[ELECTRON_][1]->Fill(reco_addJets_deltaR, gen_addbJets_deltaR, eventWeight);
	  h_matrix->h_respMatrix_invMass[ELECTRON_][1]->Fill(reco_addJets_invMass, gen_addbJets_invMass, eventWeight);
	  h_matrix->h_gen_addbjets_deltaR[ELECTRON_][1]->Fill(gen_addbJets_deltaR, eventWeight);
	  h_matrix->h_gen_addbjets_invMass[ELECTRON_][1]->Fill(gen_addbJets_invMass, eventWeight);
	  if( nbjets_t >= NUMBER_OF_BJETS_ ){
	    h_control->h_reco_addjets_deltaR[ELECTRON_][1]->Fill(reco_addJets_deltaR, eventWeight);
	    h_control->h_reco_addjets_invMass[ELECTRON_][1]->Fill(reco_addJets_invMass, eventWeight);
	    h_matrix->h_respMatrix_deltaR[ELECTRON_][2]->Fill(reco_addJets_deltaR, gen_addbJets_deltaR, eventWeight);
	    h_matrix->h_respMatrix_invMass[ELECTRON_][2]->Fill(reco_addJets_invMass, gen_addbJets_invMass, eventWeight);
	    h_matrix->h_gen_addbjets_deltaR[ELECTRON_][2]->Fill(gen_addbJets_deltaR, eventWeight);
	    h_matrix->h_gen_addbjets_invMass[ELECTRON_][2]->Fill(gen_addbJets_invMass, eventWeight);
	  }//nbjets >= 2
	  if( nbjets_t >= NUMBER_OF_BJETS_+1 ){
	    h_control->h_reco_addjets_deltaR[ELECTRON_][1]->Fill(reco_addJets_deltaR, eventWeight);
	    h_control->h_reco_addjets_invMass[ELECTRON_][1]->Fill(reco_addJets_invMass, eventWeight);
	    h_matrix->h_respMatrix_deltaR[ELECTRON_][3]->Fill(reco_addJets_deltaR, gen_addbJets_deltaR, eventWeight);
	    h_matrix->h_respMatrix_invMass[ELECTRON_][3]->Fill(reco_addJets_invMass, gen_addbJets_invMass, eventWeight);
	    h_matrix->h_gen_addbjets_deltaR[ELECTRON_][3]->Fill(gen_addbJets_deltaR, eventWeight);
	    h_matrix->h_gen_addbjets_invMass[ELECTRON_][3]->Fill(gen_addbJets_invMass, eventWeight);
	  }//nbjets >= 3
	}//njets >= 6
      }//One electron
  }//Reco tree reader
  
  while(gentreeReader.Next()){
    const int mode = *gen_channel;
    const float genweight = *gen_weight;

    TLorentzVector gen_addBjet1, gen_addBjet2;
    double gen_addbJets_deltaR = -999.0;
    double gen_addbJets_invMass = -999.0;
    gen_addBjet1.SetPtEtaPhiE(*gen_addbjet1_pt, *gen_addbjet1_eta, *gen_addbjet1_phi, *gen_addbjet1_e);
    gen_addBjet2.SetPtEtaPhiE(*gen_addbjet2_pt, *gen_addbjet2_eta, *gen_addbjet2_phi, *gen_addbjet2_e);

    gen_addbJets_deltaR = gen_addBjet1.DeltaR(gen_addBjet2);
    gen_addbJets_invMass = (gen_addBjet1+gen_addBjet2).M();

    if(*gen_channel == MUON_){
      h_matrix->h_gen_addbjets_deltaR_nosel[MUON_]->Fill(gen_addbJets_deltaR, genweight);
      h_matrix->h_gen_addbjets_invMass_nosel[MUON_]->Fill(gen_addbJets_invMass, genweight);
    }
    else if(*gen_channel == ELECTRON_){
      h_matrix->h_gen_addbjets_deltaR_nosel[ELECTRON_]->Fill(gen_addbJets_deltaR, genweight);
      h_matrix->h_gen_addbjets_invMass_nosel[ELECTRON_]->Fill(gen_addbJets_invMass, genweight);
    }
    else
      cout << "Warning : There is no such channel" << endl;
  }
  
  for(int iChannel=0; iChannel<nChannel; ++iChannel){
    h_matrix->h_gen_addbjets_deltaR_nosel[iChannel]->AddBinContent(xNbins_gen_addbjets_dR,
	h_matrix->h_gen_addbjets_deltaR_nosel[iChannel]->GetBinContent(xNbins_gen_addbjets_dR+1));
    h_matrix->h_gen_addbjets_deltaR_nosel[iChannel]->ClearUnderflowAndOverflow();
    h_matrix->h_gen_addbjets_invMass_nosel[iChannel]->AddBinContent(xNbins_gen_addbjets_M,
	h_matrix->h_gen_addbjets_invMass_nosel[iChannel]->GetBinContent(xNbins_gen_addbjets_M+1));

    for(int iStep=0; iStep<nStep; ++iStep){
      h_control->h_reco_addjets_deltaR[iChannel][iStep]->AddBinContent(xNbins_reco_addjets_dR,
	  h_control->h_reco_addjets_deltaR[iChannel][iStep]->GetBinContent(xNbins_reco_addjets_dR+1));
      h_control->h_reco_addjets_deltaR[iChannel][iStep]->ClearUnderflowAndOverflow();
      h_control->h_reco_addjets_invMass[iChannel][iStep]->AddBinContent(xNbins_reco_addjets_M,
	  h_control->h_reco_addjets_invMass[iChannel][iStep]->GetBinContent(xNbins_reco_addjets_M+1));
      h_control->h_reco_addjets_invMass[iChannel][iStep]->ClearUnderflowAndOverflow();
      h_matrix->h_gen_addbjets_deltaR[iChannel][iStep]->AddBinContent(xNbins_gen_addbjets_dR,
	  h_matrix->h_gen_addbjets_deltaR[iChannel][iStep]->GetBinContent(xNbins_gen_addbjets_dR+1));
      h_matrix->h_gen_addbjets_deltaR[iChannel][iStep]->ClearUnderflowAndOverflow();
      h_matrix->h_gen_addbjets_invMass[iChannel][iStep]->AddBinContent(xNbins_gen_addbjets_M,
	  h_matrix->h_gen_addbjets_invMass[iChannel][iStep]->GetBinContent(xNbins_gen_addbjets_M+1));
      h_matrix->h_gen_addbjets_invMass[iChannel][iStep]->ClearUnderflowAndOverflow();

      for(int iYaxis=1; iYaxis<=xNbins_gen_addbjets_dR; ++iYaxis){
	cout << "dR Xaxis Overflow : " << h_matrix->h_respMatrix_deltaR[iChannel][iStep]->GetBinContent(xNbins_reco_addjets_dR+1, iYaxis) << endl;
	double tmp = h_matrix->h_respMatrix_deltaR[iChannel][iStep]->GetBinContent(xNbins_reco_addjets_dR, iYaxis)+
	  h_matrix->h_respMatrix_deltaR[iChannel][iStep]->GetBinContent(xNbins_reco_addjets_dR+1, iYaxis);
	h_matrix->h_respMatrix_deltaR[iChannel][iStep]->SetBinContent(xNbins_reco_addjets_dR, iYaxis, tmp);
      }
      for(int iXaxis=1; iXaxis<=xNbins_reco_addjets_dR; ++iXaxis){
	cout << "dR Yaxis Overflow : " << h_matrix->h_respMatrix_deltaR[iChannel][iStep]->GetBinContent(iXaxis, xNbins_gen_addbjets_dR+1) << endl;
        double tmp = h_matrix->h_respMatrix_deltaR[iChannel][iStep]->GetBinContent(iXaxis, xNbins_gen_addbjets_dR)+
	  h_matrix->h_respMatrix_deltaR[iChannel][iStep]->GetBinContent(iXaxis, xNbins_gen_addbjets_dR+1);
	h_matrix->h_respMatrix_deltaR[iChannel][iStep]->SetBinContent(iXaxis, xNbins_gen_addbjets_dR, tmp);
      }

      for(int iYaxis=1; iYaxis<=xNbins_gen_addbjets_M; ++iYaxis){
	cout << "M Xaxis Overflow : " << h_matrix->h_respMatrix_invMass[iChannel][iStep]->GetBinContent(xNbins_reco_addjets_M+1, iYaxis) << endl;
	double tmp = h_matrix->h_respMatrix_invMass[iChannel][iStep]->GetBinContent(xNbins_reco_addjets_M, iYaxis)+
	  h_matrix->h_respMatrix_invMass[iChannel][iStep]->GetBinContent(xNbins_reco_addjets_M+1, iYaxis);
	h_matrix->h_respMatrix_invMass[iChannel][iStep]->SetBinContent(xNbins_reco_addjets_M, iYaxis, tmp);
      }
      for(int iXaxis=1; iXaxis<=xNbins_reco_addjets_M; ++iXaxis){
	cout << "M Yaxis Overflow : " << h_matrix->h_respMatrix_invMass[iChannel][iStep]->GetBinContent(iXaxis, xNbins_gen_addbjets_M+1) << endl;
        double tmp = h_matrix->h_respMatrix_invMass[iChannel][iStep]->GetBinContent(iXaxis, xNbins_gen_addbjets_M)+
	  h_matrix->h_respMatrix_invMass[iChannel][iStep]->GetBinContent(iXaxis, xNbins_gen_addbjets_M+1);
	h_matrix->h_respMatrix_invMass[iChannel][iStep]->SetBinContent(iXaxis, xNbins_gen_addbjets_M, tmp);
      }
      h_matrix->h_respMatrix_deltaR[iChannel][iStep]->ClearUnderflowAndOverflow();
      h_matrix->h_respMatrix_invMass[iChannel][iStep]->ClearUnderflowAndOverflow();
    }
  }

/*  for(int iChannel=0; iChannel<nChannel; ++iChannel){
    for(int iStep=0; iStep<nStep; ++iStep){
      for(int iXaxis=1;iXaxis<=xNbins_reco_addjets_dR; ++iXaxis){
	for(int iYaxis=1; iYaxis<=xNbins_gen_addbjets_dR; ++iYaxis){
	  double tmp = h_matrix->h_respMatrix_deltaR[iChannel][iStep]->GetBinContent(iXaxis, iYaxis)/h_matrix->h_gen_addbjets_deltaR[iChannel][iStep]->GetBinContent(iYaxis);
	  h_matrix->h_respMatrix_deltaR[iChannel][iStep]->SetBinContent(iXaxis, iYaxis, tmp);
	}
      }

      for(int iXaxis=1;iXaxis<=xNbins_reco_addjets_M; ++iXaxis){
	for(int iYaxis=1; iYaxis<=xNbins_gen_addbjets_M; ++iYaxis){
	  double tmp = h_matrix->h_respMatrix_invMass[iChannel][iStep]->GetBinContent(iXaxis, iYaxis)/h_matrix->h_gen_addbjets_invMass[iChannel][iStep]->GetBinContent(iYaxis);
	  h_matrix->h_respMatrix_invMass[iChannel][iStep]->SetBinContent(iXaxis, iYaxis, tmp);
	}
      }
    }
  }
  */
  outFile->Write();
  outFile->Close();
}
